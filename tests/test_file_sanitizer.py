"""Test functions for the _sanitize_file module."""
import pathlib

from typing import Iterable, Tuple

import pytest

from repobee_sanitizer import _sanitize_file

import repobee_plug as plug

INPUT_FILENAME = "input.in"
OUTPUT_FILENAME = "output.out"

CUR_DIR = pathlib.Path(__file__).parent

VALID_CASES_BASEDIR = CUR_DIR / "test_case_files" / "valid"
INVALID_CASES_BASEDIR = CUR_DIR / "test_case_files" / "invalid"


def discover_test_cases(
    test_case_base: pathlib.Path,
) -> Iterable[pathlib.Path]:
    """Return a list of all test case directories that are direct or indirect
    children of the base path.
    """

    def _is_test_dir(d):
        if not d.is_dir():
            return

        children = [f.name for f in d.iterdir()]
        return INPUT_FILENAME in children and OUTPUT_FILENAME in children

    return filter(_is_test_dir, test_case_base.rglob("*"))


def generate_valid_test_cases():
    valid_test_case_dirs = discover_test_cases(VALID_CASES_BASEDIR)
    marked_args = [
        (read_valid_test_case_files(case_dir), case_dir)
        for case_dir in valid_test_case_dirs
    ]
    args = [arg for arg, _ in marked_args]
    ids = [str(id_.relative_to(VALID_CASES_BASEDIR)) for _, id_ in marked_args]
    return args, ids


def generate_invalid_test_cases():
    invalid_files = list(INVALID_CASES_BASEDIR.glob("*.in"))
    ids = [str(f.relative_to(INVALID_CASES_BASEDIR)) for f in invalid_files]
    return [f.read_text(encoding="utf8") for f in invalid_files], ids


def read_valid_test_case_files(test_case_dir: pathlib.Path) -> Tuple[str, str]:
    inp = (test_case_dir / INPUT_FILENAME).read_text(encoding="utf8")
    out = (test_case_dir / OUTPUT_FILENAME).read_text(encoding="utf8")
    return inp, out


VALID_TEST_CASE_ARGS, VALID_TEST_CASE_IDS = generate_valid_test_cases()
INVALID_TEST_CASE_ARGS, INVALID_TEST_CASE_IDS = generate_invalid_test_cases()


@pytest.mark.parametrize(
    "inp", INVALID_TEST_CASE_ARGS, ids=INVALID_TEST_CASE_IDS
)
def test_sanitize_invalid(inp: str):
    with pytest.Raises(plug.PlugError("Invalid marker syntax")):
        assert _sanitize_file.sanitize(inp)


@pytest.mark.parametrize(
    "inp,expected", VALID_TEST_CASE_ARGS, ids=VALID_TEST_CASE_IDS
)
def test_sanitize_valid(inp: str, expected: str):
    """Test sanitizing valid cases with predefined expected outputs. Input
    for this test function is generated by the pytest_generate_tests
    hook.
    """
    assert _sanitize_file.sanitize(inp) == expected
