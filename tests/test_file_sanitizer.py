"""Test functions for the _sanitize_file module."""
import pathlib

from typing import List, Iterable, Tuple

import pytest

from repobee_sanitizer import _sanitize_file

INPUT_FILENAME = "input.in"
OUTPUT_FILENAME = "output.out"

CUR_DIR = pathlib.Path(__file__).parent

VALID_CASES = CUR_DIR / "test_case_files" / "valid"


def pytest_generate_tests(metafunc):
    if metafunc.function == TestSanitize.test_process_valid_case:
        metafunc.parametrize("inp,expected", discover_test_cases(VALID_CASES))


class TestSanitize:
    """Tests for the sanitize function."""

    def test_process_valid_case(self, inp: str, expected: str):
        """Test processing valid cases with predefined expected outputs. Input
        for this test function is generated by the pytest_generate_tests
        hook.
        """
        assert _sanitize_file.sanitize(inp) == expected


def discover_test_cases(test_case_base: pathlib.Path) -> Iterable[pathlib.Path]:
    """Return a list of all test case directories that are direct or indirect
    children of the base path.
    """

    def _is_test_dir(d):
        if not d.is_dir():
            return

        children = [f.name for f in d.iterdir()]
        return INPUT_FILENAME in children and OUTPUT_FILENAME in children

    def _read_test_case_files(test_case_dir: pathlib.Path) -> Tuple[str, str]:
        inp = (test_case_dir / INPUT_FILENAME).read_text(encoding="utf8")
        out = (test_case_dir / OUTPUT_FILENAME).read_text(encoding="utf8")
        return inp, out

    return map(_read_test_case_files, filter(_is_test_dir, test_case_base.rglob("*")))

